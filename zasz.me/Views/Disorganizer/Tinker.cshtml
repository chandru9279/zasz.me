@using zasz.me.Controllers.Utils
@model zasz.me.Models.TinkerModel
@{
    ViewBag.Title = "Tinker";
    var Attribs = new {@class = "ProTextBox"};
    var AttribsArea = new {@class = "ProTextArea", rows = 10};
}
@section Head
{
    <link href="@Url.Content("~/Content/jPicker/jPicker-1.1.6.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/jpicker-1.1.6.js")" type="text/javascript"> </script>
    <script type="text/javascript">
        $(function () {
            var OutputControlContent = $('#OutputControl').html();
            var jPickerConfig = {
                window: {
                    expandable: true,
                    title: 'Pick Background Color',
                    alphaSupport: true
                },
                color: {
                                        
                },
                images: {
                    clientPath: '/Content/jPicker/Images/'
                }
            };
            $('#ForegroundExpandable').jPicker(jPickerConfig);
            $('#BackgroundExpandable').jPicker(jPickerConfig);
            @{
                var ForeColor = (!string.IsNullOrEmpty(Model.ForegroundColor)) ? Model.ForegroundColor : "FF0000FF";
                var BackColor = (!string.IsNullOrEmpty(Model.BackgroundColor)) ? Model.BackgroundColor : "FFFFFFFF";
            };
            $.jPicker.List[0].color.active.val('ahex', '@ForeColor');
            $.jPicker.List[1].color.active.val('ahex', '@BackColor');

            $('#RunDisorganizer').click(function() {
                var formValid = $("#DisorganizerTinker").valid();
                if (!formValid) return false;
                var serialized = $('#DisorganizerTinker').serialize();
                $('#OutputControl').html(OutputControlContent);
                $('#TheDisorganized').replaceWith(
                    '<img id="TheDisorganized" class="TheDisorganized" src="/Disorganizer/Cloud?dummy='
                        + new Date().getTime() + '&' + serialized +
                        '" alt="Tag cloud" onload="return getLinks();" />');
                return false;
            });
        });

        function getLinks() {
            $.get('/Disorganizer/Links', function(links) {
                $('#TagCloudLinks').replaceWith(links);
            });
        }

    </script>
    <style type="text/css">
        .Field { display: inline-block; }

        select { width: 241px !important; }

        .TheDisorganized
        {
            position: relative;
        }

        .OutputControl
        {
            width: 100%;
            text-align: center;
            display: block;
        }

        input[type="checkbox"]
        {
            margin-right: 20px;
        }
    </style>
}
@using(Html.BeginForm("Cloud","Disorganizer", FormMethod.Post, new {id="DisorganizerTinker"}))
{
    
    <div style="text-align: center">
        
        <div class="Field">
            Words
            @Html.ValidationMessageFor(x => x.Words)<br />
            @Html.TextAreaFor(x => x.Words, AttribsArea)
        </div>
        <br />
        <div class="Field">
            Max Font Size
            @Html.ValidationMessageFor(x => x.MaxFontSize)<br />
            @Html.TextBoxFor(x => x.MaxFontSize, Attribs)
        </div>
        <div class="Field">
            Min Font Size
            @Html.ValidationMessageFor(x => x.MinFontSize)<br />
            @Html.TextBoxFor(x => x.MinFontSize, Attribs)
        </div>
        <br />
        <div class="Field">
            Width
            @Html.ValidationMessageFor(x => x.Width)<br />
            @Html.TextBoxFor(x => x.Width, Attribs)
        </div>
        <div class="Field">
            Height
            @Html.ValidationMessageFor(x => x.Height)<br />
            @Html.TextBoxFor(x => x.Height, Attribs)
        </div>
        <br />
        <div>
            Note : Angle will break CSS hover animation</div>
        <div class="Field">
            Angle
            @Html.ValidationMessageFor(x => x.Angle)<br />
            @Html.TextBoxFor(x => x.Angle, Attribs)
        </div>
        <div class="Field">
            Font<br />
            @Html.DropDownListFor(x => x.SelectedFont, Model.Fonts.ToSelectList(), Attribs)
        </div>
        <br />
        <div class="Field">
            Display Strategy<br />
            @Html.DropDownListFor(x => x.SelectedStrategy, Model.Strategies.ToSelectList(), Attribs)
        </div>
        <div class="Field">
            Theme<br />
            @Html.DropDownListFor(x => x.SelectedTheme, Model.Themes.ToSelectList(), Attribs)
        </div>
        <br />
        <div class="Field">
            Style<br />
            @Html.DropDownListFor(x => x.SelectedStyle, Model.Styles.ToSelectList(), Attribs)
        </div>
        <div class="Field">
            Margin
            @Html.ValidationMessageFor(x => x.Margin)<br />
            @Html.TextBoxFor(x => x.Margin, Attribs)
        </div>
        <div>
            Note : Click on the smaller box to pick the color. Choice of theme will affect colors,
            for example LightBg theme and black background will become gray. So will Darkbg
            and white.</div>
        <div class="Field">
            Background Color<br />
            @Html.TextBoxFor(x => x.BackgroundColor, new {id = "BackgroundExpandable", @class = "ProTextBox", style = "width: 190px"})
        </div>
        <div class="Field">
            Foreground Color<br />
            @Html.TextBoxFor(x => x.ForegroundColor, new {id = "ForegroundExpandable", @class = "ProTextBox", style = "width: 190px"})
        </div>
        <br />
        <div>
            Note : If there is not enough space in the image to place all the words, the skipped
            words will appear here. Increase spiral room only when performance is bad on your
            server.</div>
        <div class="Field">
            Words skipped (Dont fill this)<br />
            <input type="text" id="Skipped" class="ProTextBox"/>
        </div>
        <div class="Field">
            Spiral Room (Fill only for performance)
            @Html.ValidationMessageFor(x => x.SpiralRoom)<br />
            @Html.TextBoxFor(x => x.SpiralRoom, Attribs)
        </div>
        <br />
        <div class="Field">
            Crop
            @Html.CheckBoxFor(x => x.Crop)
        </div>
        <div class="Field">
            Vertical Text Right
            @Html.CheckBoxFor(x => x.VerticalTextRight)
        </div>
        <div class="Field">
            Show Boundaries
            @Html.CheckBoxFor(x => x.ShowBoundaries)
        </div>
        <br />
        <br />
        <div class="Field">
            <input type="button" value="Generate" id="RunDisorganizer" class="Pro-Button" />
        </div>
    </div>
}

<div class="Sidebar-Control">
    <div class="Sidebar-Title">
        Disorganizer&trade;</div>
    <div class="OutputControl" id="OutputControl">
        <div style="display: inline-block;">
            <div id="TagCloudLinks"></div>
            <div id="TheDisorganized"></div>
        </div>
    </div>
    <div class="Description" id='GeneratedTime'></div>
</div>

<div id='TagAlert' style="display: none; width: 200px" class="Pro-Popup">	
    <h1 class="Sidebar-Title" style="text-align: center;">Disorganizer&trade;</h1>
    <p id='DialogContent' style="text-align: center; width: 100%"></p>
</div>